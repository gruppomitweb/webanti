<!DOCTYPE html>
<html>
<head>
 <title>Actions Code</title>
 <script type="text/javascript" src="../stdFunctions.js"></script>
 <script type="text/javascript" src="../controls.js"></script>

 <link rel="stylesheet" href="../codemirror/lib/codemirror.css">
 <link rel="stylesheet" href="../codemirror/addon/fold/foldgutter.css">
 <link rel="stylesheet" href="../codemirror/addon/dialog/dialog.css">
 <link rel="stylesheet" href="../codemirror/addon/hint/show-hint.css">
 <link rel="stylesheet" href="../codemirror/theme/ambiance.css">
 <link rel="stylesheet" href="../codemirror/theme/blackboard.css">
 <link rel="stylesheet" href="../codemirror/theme/neat.css">
 <link rel="stylesheet" href="../codemirror/theme/elegant.css">
 <link rel="stylesheet" href="../codemirror/theme/erlang-dark.css">
 <link rel="stylesheet" href="../codemirror/theme/lesser-dark.css">
 <link rel="stylesheet" href="../codemirror/theme/night.css">
 <link rel="stylesheet" href="../codemirror/theme/monokai.css">
 <link rel="stylesheet" href="../codemirror/theme/cobalt.css">
 <link rel="stylesheet" href="../codemirror/theme/eclipse.css">
 <link rel="stylesheet" href="../codemirror/theme/midnight.css">
 <link rel="stylesheet" href="../codemirror/theme/solarized.css">
 <link rel="stylesheet" href="../codemirror/theme/rubyblue.css">
 <link rel="stylesheet" href="../codemirror/theme/twilight.css">
 <link rel="stylesheet" href="../codemirror/theme/vibrant-ink.css">
 <link rel="stylesheet" href="../codemirror/theme/xq-dark.css">
 <link rel="stylesheet" href="../codemirror/theme/xq-light.css">

 <link rel="stylesheet" href="editItemEvent.css">
 <script type='text/javascript' src="../codemirror/lib/codemirror.js"></script>
 <script type='text/javascript' src="../codemirror/mode/javascript/javascript.js"></script>
 <script type='text/javascript' src="../codemirror/addon/edit/matchbrackets.js"></script>
 <script type='text/javascript' src="../codemirror/addon/comment/comment.js"></script>
 <script type='text/javascript' src="../codemirror/addon/comment/continuecomment.js"></script>
 <script type='text/javascript' src="../codemirror/addon/dialog/dialog.js"></script>
 <script type='text/javascript' src="../codemirror/addon/hint/show-hint.js"></script>
 <!--script type='text/javascript' src="../codemirror/addon/hint/javascript-hint.js"></script-->
 <script type='text/javascript' src="../codemirror/addon/search/searchcursor.js"></script>
 <script type='text/javascript' src="../codemirror/addon/search/search.js"></script>
 <script type='text/javascript' src="../codemirror/addon/selection/active-line.js"></script>
 <script type='text/javascript' src="../codemirror/addon/selection/mark-selection.js"></script>
 <script type='text/javascript' src="../codemirror/addon/search/match-highlighter.js"></script>
 <script type='text/javascript' src="../codemirror/addon/fold/foldcode.js"></script>
 <script type='text/javascript' src="../codemirror/addon/fold/foldgutter.js"></script>
 <script type='text/javascript' src="../codemirror/addon/fold/brace-fold.js"></script>
 <script type='text/javascript' src="../codemirror/addon/fold/xml-fold.js"></script>
 <style type="text/css">
      .breakpoints { width: 1em; }
      li.CodeMirror-hint {
        max-width: none;
      }
 </style>
</head>
<body>
  <div id='topbar'>
    <span class="title">Action Code</span>
    <div class='float_right'>
      <a id="toolbar_cancel" class="action" href="javascript:void(0)" title='Cancel'>CANCEL</a>
    </div>
    <div class='float_right'>
      <a id="toolbar_ok" class="action" href="javascript:void(0)" title='Save and Close'>SAVE</a>
    </div>
    <div class="action_bar">
      <!--div id='topbar_right' class='topbar_sides float_right'></div-->

      <!--div id='topbar_left' class='topbar_sides float_left'></div-->
      <div class='float_left topbar_padding'>
        <label class='small' for="id_item">Items: </label>
        <div id="selectname" class="select" style="display:inline"></div>
      </div>
      <div class='topbar_separator float_left'></div>
      <div class='float_left topbar_padding'>
        <label class='small' for="event_item">Events: </label>
        <div id="selectevent" class="select" style="display:inline"></div>
      </div>
      <div class='topbar_separator float_left'></div>
      <div class='float_left topbar_padding'>
        <label class='small' for="function_item">Functions: </label>
        <div id="selectfunction" class="select" style="display:inline"></div>
      </div>
      <div class='float_right topbar_padding' >
        <a id="toolbar_search" class="title_btn" href="javascript:void(0)" title='Search'></a>
      </div>
      <div class='float_right topbar_padding'>
        <a id="toolbar_help" class="title_btn" href="javascript:void(0)" title='Help'>
        </a>
          <div id='helpkeys_content' class='small'>
           <table cellpadding="5" border="0"><tbody>
           <tr><td>Search</td><td align="right" class="keys" nowrap>Ctrl-F</td></tr>
           <tr><td>Replace</td><td align="right" class="keys" nowrap>Ctrl-R</td></tr>
           <tr><td>Find Next</td><td align="right" class="keys" nowrap>F3</td></tr>
           <tr><td>Find Prev</td><td align="right" class="keys" nowrap>Shift-F3</td></tr>
           <tr><td>Toggle bookmark</td><td align="right" class="keys" nowrap>Ctrl-F2</td></tr>
           <tr><td>Next bookmark</td><td align="right" class="keys" nowrap>F2</td></tr>
           <tr><td>Prev bookmark</td><td align="right" class="keys" nowrap>Shift-F2</td></tr>
           <tr><td>Add/Remove Comment</td><td align="right" class="keys" nowrap>Ctrl-Q</td></tr>
           <tr><td>Save All</td><td align="right" class="keys" nowrap>Ctrl-S</td></tr>
           </tbody></table>
        </div>
      </div>
      <div class='float_right topbar_padding' >
        <a id="toolbar_style" class="title_btn" href="javascript:void(0)" title='Style'></a>
        <div id="opt_pane">
          <div id="opt_pane_wrapper">
            <div id="opt_pane_content">
              <label for="theme-choise">Style: </label>
              <br />
              <select  id="theme" title="Select favorite theme">
                <option  value="ambiance" label="Ambiance" />
                <option  value="blackboard" label="Blackboard" />
                <option  value="cobalt" label="Cobalt" />
                <option  value="eclipse" label="Eclipse" />
                <option  value="elegant" label="Elegant" />
                <option  value="erlang-dark" label="Erlang-dark" />
                <option  value="lesser-dark" label="Lesser-dark" />
                <option  value="default" label="Light" />
                <option  value="midnight" label="Midnight" />
                <option  value="monokai" label="Monokai" />
                <option  value="neat" label="Neat" />
                <option  value="night" label="Night" />
                <option  value="rubyblue" label="Rubyblue" />
                <option  value="solarized" label="Solarized" />
                <option  value="twilight" label="Twilight" />
                <option  value="vibrant-ink" label="Vibrant-ink" />
                <option  value="xq-dark" label="Xq-dark" />
                <option  value="xq-light" label="Xq-light" />
              </select>
              <br />
              <label id="slider">Font size: </label>
              <br />
              <div style="padding:5px;">
                <input type="range" id="fontSlider" name="volume" min="8" max="35" />
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
  <div id='editor'>
      <div id="loader"></div>
  </div>

</body>
</html>
<script>
(function(w){
  'use strict';
  // initialisation of codemirrorOptionObj
  var	itemsHTML
  	,	index
  	,	code
  	,	codeEditor
  	,	form
  	,	RetVal
    , z_ac_style = localStorage.getItem('zucchetti_ac_style')
  	,	ac_style = !Empty(z_ac_style) ? JSON.parse(z_ac_style) : { fontSize: 12, theme: "" }
    , changed=false
    , codeMirrorOpt={}
    , resizeTimer
    , status = { folded : {}, breakpoints : {}}
    , editor = document.getElementById('editor')
  ;
  /****** Gestione del LocalStorage *******/
  localStorage.setItem('zucchetti_ac_style',JSON.stringify(ac_style));
  /*******codemirror options*******/
  function thisHints(onlyItems) {
    var toAdd = "";
    if (onlyItems) toAdd = "_";
    var ptlItems=[]
    for (var i=0;i<itemsHTML.length;i++) {
      if (itemsHTML[i].type!='Portlet')
        ptlItems.push({text:itemsHTML[i].name+toAdd,displayText:itemsHTML[i].name});
    }
    ptlItems.sort(function(a, b) {
      return a.displayText.toLowerCase() > b.displayText.toLowerCase() ? 1 : -1;
    });

    if (!onlyItems) {
      ptlItems = ptlItems.concat(itemHints('this'));
    }
    return ptlItems;
  }
  var items=null;
  function itemNames() {
    if (items==null) {
      items = [];
      for (var i=0;i<itemsHTML.length;i++) {
        if (itemsHTML[i].type!='Portlet')
          items.push(itemsHTML[i].name);
        }
    }
    return items;
  }
  function itemHints(itemName) {
    var objFound = null, list = [];
    if (itemName=='this') {
      objFound = form;
    } else {
      for (var i=0;i<itemsHTML.length;i++) {
        if (itemsHTML[i].name==itemName)
          objFound = itemsHTML[i];
      }
    }
    if (objFound) {
      var _objC = objFound.objClass;
      if (!Empty(_objC.functions)) {
        objFound=_objC.functions.sort(function (a, b) {
          if (Array.isArray(a) && a.length > 0){
            a = a[0];
          }
          else if ( !(typeof a === 'string' ) ) { // object
            a = a.name;
          }
          if (Array.isArray(b) && b.length > 0){
            b = b[0];
          }else if ( !(typeof b === 'string' ) ) { // object
            b = b.name;
          }
          return a.toLowerCase().localeCompare(b.toLowerCase());
        });
      }
      if(objFound){
        var descr,value,long_descr;
        for(var i=0;i<objFound.length;i++){
          if( _objC.generateSignatureObject ) {
            var robj = _objC.generateSignatureObject(objFound[i], 'function');
            descr = robj.name;
            value = robj.signature;
            long_descr = robj.tooltip;
          } else {
            if(IsA(objFound[i],'C')){
              value=descr=objFound[i]
            }else if (Array.isArray(objFound[i])){
              descr=objFound[i][0];
              value=objFound[i][1];
              if(!Empty(objFound[i][2])) long_descr=objFound[i][2];
            }
            else { //object
              descr = objFound[i].name;
              value = objFound[i].signature ? objFound[i].signature : objFound[i].name;
              long_descr = objFound[i].tooltip;
            }
          }
          list.push({text:value,displayText:long_descr? descr +" "+ long_descr : descr});
        }
      }
    }
    list.sort(function(a, b) {
      return a.displayText.toLowerCase() > b.displayText.toLowerCase() ? 1 : -1;
    });
    return list;
  }
  function itemEvents(itemName) {
    var objFound = null, list = [];
    if (itemName=='this') {
      objFound = form;
    } else {
      for (var i=0;i<itemsHTML.length;i++) {
        if (itemsHTML[i].name==itemName)
          objFound = itemsHTML[i];
      }
    }
    if (objFound) {
      objFound=objFound.objClass.events;
      if(objFound){
        var value,descr;
        for(i=0;i<objFound.length;i++){
          if(IsA(objFound[i],'C')){
            value=descr=objFound[i];
          }else{
            descr=objFound[i][0];
            value=objFound[i][1];
          }
          var toAdd='';
          if(value.indexOf('(')==-1)
            toAdd+='()';
          if(value.indexOf('{')==-1)
            toAdd+='{';
          toAdd+='\n  ';


          list.push({text:value+toAdd,displayText:descr});
        }
      }
    }
    list.sort(function(a, b) {
      return a.displayText.toLowerCase() > b.displayText.toLowerCase() ? 1 : -1;
    });
    return list;
  }

  var originalList = null;
  var initiator = null;
  function helper(editor, options) {
    /*se l'helper ritorna un array con un elemento non lo seleziona in automatico ma lascia la possibilita' all'utente di scegliere se selezionare il valore*/
    options.completeSingle=false;
    var cur = editor.getCursor(), curLine = editor.getLine(cur.line), prevCur = { line : cur.line, ch : cur.ch-1};
    var start = cur.ch, end = start;
    var currentToken = editor.getTokenAt(cur);
    var prevToken = editor.getTokenAt(prevCur);
    var list = [];
    if (originalList!=null) {
      start = currentToken.start;
      var offset, token;
      if (initiator=='_') {
        offset = currentToken.string.lastIndexOf('_')+1;
        token = currentToken.string.substr(offset);
        start += offset;
      } else {
        offset = 0;
        token = currentToken.string;
      }
      list = originalList.filter(function(el){ return el.displayText.lastIndexOf(token,0)==0 } );
    } else if (currentToken.string=='.') {
      if (prevToken.string=='this') { //variables
        list = thisHints();
      } else if (prevToken.type=='property' && itemNames().indexOf(prevToken.string)>-1 ) {
        list = itemHints(prevToken.string);
      }
      originalList = list;
      initiator = '.';
    } else if (Right(currentToken.string,1)=='_') {
      var item = Substr(prevToken.string,1,Len(prevToken.string)-1);
      prevToken = editor.getTokenAt(CodeMirror.Pos(cur.line, prevToken.start));
      if (prevToken.string==' ') {
        prevToken = editor.getTokenAt(CodeMirror.Pos(cur.line, prevToken.start));
        if (prevToken.string=='function') {
          if (itemNames().indexOf(item) > -1 || item=='this') {
            list = itemEvents(item);
          }
        }
      }
      originalList = list;
      initiator = '_';
    } else if (currentToken.string==' ') {
      if (prevToken.string=='function') { //propongo tutti gli item
        list = thisHints('_');
        list.unshift({text:'this_',displayText:'this'});
      }
      originalList = list;
      initiator = ' ';
      }
    return {list: list, from: CodeMirror.Pos(cur.line, start), to: CodeMirror.Pos(cur.line, end)};
  }
  codeMirrorOpt.mode="javascript";
  CodeMirror.extendMode("javascript", {lineComment: "//"});

  CodeMirror.registerHelper("hint", "javascript", helper);
  //CodeMirror.registerHelper("hint", "anyword",helper);

  codeMirrorOpt.extraKeys= {"Ctrl-R": "replace", "F3": "findNext", "Shift-F3": "findPrev", "Ctrl-Q": "toggleComment","Ctrl-S":function(){
      (parent.parent.saveTool?parent.parent.saveTool():(parent.save?parent.save():void(0)));parent.managed=true
    },
    "F2" : function(cm) {
      var pos = cm.getCursor(),
          found = -1,
          i;
      for (i = pos.line+1; found == -1 && i < cm.lineCount(); i++) { //righe successive
        var info = cm.lineInfo(i);
        if (info.gutterMarkers && info.gutterMarkers.breakpoints ) {
          found = i;
        }
      }
      for (i = 0; found == -1 && i < pos.line; i++) { //righe precedenti
        var info = cm.lineInfo(i);
        if (info.gutterMarkers && info.gutterMarkers.breakpoints ) {
          found = i;
        }
      }
      if (found>-1) {
        cm.setCursor({ line: found, ch: 0} );
      }
    },
    "Shift-F2" : function(cm) {
      var pos = cm.getCursor(),
          found = -1,
          i;
      for (i = pos.line-1; found == -1 && i >= 0; i--) { //righe precedenti inverse
        var info = cm.lineInfo(i);
        if (info.gutterMarkers && info.gutterMarkers.breakpoints ) {
          found = i;
        }
      }
      for (i = cm.lineCount()-1; found == -1 && i > pos.line; i--) { //righe successive inverse
        var info = cm.lineInfo(i);
        if (info.gutterMarkers && info.gutterMarkers.breakpoints ) {
          found = i;
        }
      }
      if (found>-1) {
        cm.setCursor({ line: found, ch: 0} );
      }
    },
    "Ctrl-F2" : function(cm) {
      var pos = cm.getCursor(),
          info = cm.lineInfo(pos.line),
          hadBP = info.gutterMarkers && info.gutterMarkers.breakpoints;
      if (hadBP) {
        delete status.breakpoints[pos.line];
      } else {
        status.breakpoints[pos.line]=true;
      }
      cm.setGutterMarker(pos.line, "breakpoints", hadBP ? null : makeMarker());
    }
    }
  function makeMarker() {
    var marker = document.createElement("img");
    marker.src = "../portalstudio/images/icon/bookmark.png";
    return marker;
  }
  codeMirrorOpt.tabMode= "shift";
  codeMirrorOpt.theme=  ac_style && ac_style.theme ? ac_style.theme : 'default' ;
  document.getElementById("theme").value = codeMirrorOpt.theme;
  codeMirrorOpt.tabSize = 2;
  codeMirrorOpt.indentUnit =2;
  codeMirrorOpt.statementIndent =2;
  codeMirrorOpt.lineNumbers =true;
  codeMirrorOpt.styleActiveLine= true;
  codeMirrorOpt.highlightSelectionMatches= true;
  codeMirrorOpt.enterMode ='keep';
  codeMirrorOpt.matchBrackets=true;
  codeMirrorOpt.gutters= ["CodeMirror-linenumbers", "breakpoints", "CodeMirror-foldgutter"];
  codeMirrorOpt.onChange=function(){changed=true};
  codeMirrorOpt.foldGutter=true;

  function createCodeArea(){
    var h = editor.offsetHeight-50;
    codeEditor = CodeMirror(editor, codeMirrorOpt);
    codeEditor.on("fold", function(cm, from, to) {
      status.folded[from.line]=true;
    });
    codeEditor.on("unfold", function(cm, from, to) {
      delete status.folded[from.line];
    });
    codeEditor.on("change", function(cm,changeObj) {
      if (originalList!=null) return; //se autocompletamento gia' in funzione non faccio nulla
      var txt;
      if (changeObj.origin=='+delete') {
        var tk = cm.getTokenAt(changeObj.from);
        txt = Right(tk.string,1)
      } else {
        txt = changeObj.text[0];
      }
      if ([".","_"," "].indexOf(Right(txt,1))>-1) {
        cm.execCommand('autocomplete');
      }
    });
    codeEditor.on("endCompletion",function(cm) {
      originalList = null;
    });
    //codeEditor.getScrollerElement().style.height =h +'px';
    LibJavascript.CssClassNameUtils.addClass(codeEditor,'eventcode')
    codeEditor.getWrapperElement().id='eventcode';
    codeEditor.getWrapperElement().style.height='100%';

    codeEditor.getWrapperElement().style.fontSize = ac_style.fontSize + "px";
    codeEditor.getWrapperElement().value = codeEditor.getValue();

    /* Breakpoints */
    codeEditor.on("gutterClick", function(cm, n, type) {
      if ( type == "breakpoints" ) {
     var info = cm.lineInfo(n);
        var hadBP = info.gutterMarkers && info.gutterMarkers.breakpoints;
        if (hadBP) {
          delete status.breakpoints[n];
        } else {
          status.breakpoints[n]=true;
        }
        cm.setGutterMarker(n, "breakpoints", hadBP ? null : makeMarker());
      } else if ( type == "CodeMirror-linenumbers" ) {
        var info = cm.lineInfo(n);
        cm.setSelection( { line: n, ch : 0 }, {line: n , ch : info.text.length } );
      }
    });

    for (var i in status.breakpoints) {
      codeEditor.setGutterMarker(parseInt(i), "breakpoints", makeMarker());
    }
    for (var i in status.folded) {
      codeEditor.foldCode(CodeMirror.Pos(parseInt(i), 0));
    }
    codeEditor.refresh();
  }
  function SaveAndClose(){
    parent.actioncode = codeEditor.getValue();
    parent.codeStatus = status;
    parent.window.codeOpen=false;
    parent.window.ActionCodeLayer.close();
  }
  function Save() {
    parent.actioncode = codeEditor.getValue();
    changed = false;
  }
  function ResizeEditor(){
    clearTimeout(resizeTimer);
    ac_style.width = parent.ActionCodeLayer.getContainer().offsetWidth;
    ac_style.height = parent.ActionCodeLayer.getContainer().offsetHeight;
    codeEditor.getScrollerElement().style.width=editor.offsetWidth+'px';
    codeEditor.getScrollerElement().style.height=editor.offsetHeight+'px';
    localStorage.setItem('zucchetti_ac_style', JSON.stringify(ac_style));
  }
  /*********Gestione degli eventi************/

  code = codeMirrorOpt.value = loadCode();
  /** Start filling event and function **/
  selectName();
  document.getElementById('theme').addEventListener( 'change', function() {
    var theme=this.value;
    codeEditor.setOption('theme',theme);
    ac_style.theme = theme;
    localStorage.setItem('zucchetti_ac_style', JSON.stringify(ac_style));
  });

  document.getElementById('fontSlider').value = ac_style.fontSize;

  document.getElementById('fontSlider').addEventListener('change', function() {
    ac_style.fontSize = this.value;
    localStorage.setItem('zucchetti_ac_style', JSON.stringify(ac_style));
    codeEditor.getWrapperElement().style.fontSize = this.value + 'px';
  })

  createCodeArea();

  setTimeout(function(){codeEditor.getScrollerElement().style.height =editor.offsetHeight +'px';},300);
  codeEditor.focus();

  document.getElementById('toolbar_style').addEventListener('click',function(){
    [].forEach.call(document.querySelectorAll(".visible:not(#opt_pane)"), (other) => { other.classList.remove('visible'); });
    LibJavascript.CssClassNameUtils.toggleClass(document.getElementById('opt_pane'), 'visible');
  });
  document.getElementById('toolbar_ok').addEventListener('click',SaveAndClose);
  document.getElementById('toolbar_help').addEventListener('click',function(){
    [].forEach.call(document.querySelectorAll(".visible:not(#helpkeys_content)"), (other) => { other.classList.remove('visible'); });
    LibJavascript.CssClassNameUtils.toggleClass(document.getElementById('helpkeys_content'), 'visible');
  });
  document.getElementById('toolbar_search').addEventListener('click',function() {
    codeEditor.execCommand('find');
  });

  document.getElementById('toolbar_cancel').addEventListener('click',function CheckClosefromX(){
    if(changed){
        if (confirm("Do you want to save Actions code ?\n\nClick OK to save\nClick Cancel to ignore changes"))
          SaveAndClose()
        else{
          parent.window.codeOpen=false;
          parent.window.ActionCodeLayer.close();
        }
    }else{
      parent.window.codeOpen=false;
      parent.window.ActionCodeLayer.close();
    }
  })
  document.body.addEventListener('keydown',function(e){
    if(e.ctrlKey && e.keyCode==82){ //ctrl+r
      //Annullo il Ctrl-r di default
      if(e.preventDefault)e.preventDefault();
    }
  });
  window.addEventListener('restoreSize', function(spmodallayer){
    ac_style.maximized = false;
    localStorage.setItem('zucchetti_ac_style', JSON.stringify(ac_style));
  });
  window.addEventListener('maximized', function(spmodallayer){
    ac_style.maximized = true;
    localStorage.setItem('zucchetti_ac_style', JSON.stringify(ac_style));
  });
  window.addEventListener('resize', function(){ resizeTimer = setTimeout(ResizeEditor,50) });
  window.addEventListener('save', Save);


  /**********Gestione dello specifico editor***************/
  function loadCode(){
    itemsHTML=parent.ACitemsHTML;  // array generico degli items
    index=parent.index;      // indice corrente mainitem
    form=parent.formProp;
    if (parent.codeStatus) {
      status = parent.codeStatus;
    }
    return parent.actioncode;
  }
  function writeCode(name,obj){
    /* effettua una ricerca della funzione nella text area. Se la trova posiziona il cursore, altrimenti la crea*/
    var funct_evt=Ctrl("event_item").value;
    if(funct_evt=='-') return;
    var fnc='function '+name+'_';
    var LFidx = (fnc+funct_evt).search(/\n/);
    LFidx = LFidx==-1 ? (fnc+funct_evt).length : LFidx;
    var toFind=(fnc+funct_evt).substr(0, LFidx);//prende solo la prima riga
    var braceIdx=toFind.indexOf('(');
    if(braceIdx!=-1)
      toFind=toFind.substr(0,braceIdx)+'\\(';
    var idx = -1;
    idx = Strtran(codeEditor.getValue(),"\r","").search(new RegExp(toFind,'m'));
    if(idx!=-1){
      idx+=LFidx+(braceIdx!=-1 ? 1 : ('(){'.length)+1);
      var a = codeEditor.getSearchCursor(toFind)
      if(a.find())
        codeEditor.setSelection(a.from(),a.to())
    } else {
      fnc+=funct_evt;
      if(fnc.indexOf('(')==-1)
        fnc+='()';
      if(fnc.indexOf('{')==-1)
        fnc+='{\n  \n}';
      fnc+='\n';
      var cursorPos = codeEditor.getCursor(true);
      codeEditor.replaceRange(fnc, cursorPos, codeEditor.getCursor(false));
      codeEditor.setCursor( { line : cursorPos.line + 1, ch : 2 } );
    }
    obj.blur();
    codeEditor.focus();
  }
  function stripHtml(html) {
   var stripedHtml = html.replace(/<br>/g, '\n');
   stripedHtml = stripedHtml.replace(/<blockquote>/g, '\n');
   stripedHtml = stripedHtml.replace(/<li>/g, '\n-');
   stripedHtml = stripedHtml.replace(/<[^>]+>/g, '');
   stripedHtml = stripedHtml.replace(/\n\n/g, '\n');
   return stripedHtml;
  }
  function option(val,descr,long_descr){
    var txt = (!Empty(long_descr)?long_descr:(arguments.length==1 ? val : descr));
	txt = stripHtml(txt);
    return '<option title="'+txt+'" value="'+val+'">'+(arguments.length==1 ? val : descr)+'</option>';
  }
  function selectName(){
    var name,src, i,
    str='<select id="id_item" tabindex="2" accesskey="t">'+
        '<option value="">-</option><option value="this">this</option>';
    if ( parent.mode == "HTML" && parent.current_variant > 0 ) {
      str += '<option value="base_portlet">portlet base</option>'
    }
    if ( form.title=='default' ){
      str+='<option value="getTitlePortlet">title portlet</option>'
    }
    var comboSelectItems=[];
    for(i=0;i<itemsHTML.length;i++){
      comboSelectItems.push(itemsHTML[i]);
    }
    comboSelectItems.sort(function (a,b) {
      var minA = a.name.toLowerCase();
      var minB = b.name.toLowerCase();
      if (minA < minB) { return -1; }
      else {
      if (minA > minB) { return 1; }
        else { return 0; }
      }
    });
    for(i=0;i<comboSelectItems.length;i++){
      var item_tmp=comboSelectItems[i];
      str+='<option ';
      if(item_tmp.type=='Portlet'){
        if(index!=null && item_tmp.name==itemsHTML[index].name){
          str+='selected ';
          name=item_tmp.name;
          src=item_tmp.src;
        }
        str+='value="'+item_tmp.src+'">'+item_tmp.name+'</option>';
      }else{
        if(index!=null && item_tmp.name==itemsHTML[index].name){
          str+='selected ';
          name=item_tmp.name;
        }
        str+='value="'+item_tmp.name+'">'+item_tmp.name+'</option>';
      }
    }
    str+='</select>';
    Ctrl("selectname").innerHTML=str;
    document.getElementById('id_item').addEventListener('change', function(){
      var idx=this.selectedIndex
        , txt=this.options[idx].text
        , val=this.options[idx].value
      ;
      selectEvent(txt, val);
      selectFunction(txt, val);
    });
    selectEvent(name,src);
    selectFunction(name,src);

  }

  function selectEvent(name,src){
    var str='<select id="event_item" tabindex="3" accesskey="e"><option>-</option>',
    es, i, obj, found=false;
    if(!name)name='-';
    if(name!='this' && name!='-'){
      for(i=0;i<itemsHTML.length;i++){
        obj=itemsHTML[i];
        src=obj.src;
        if(obj.name==name || src==name){
          found=true;
          es=obj;
          break;
        }
      }
    }else if(name=='this'){
      found=true;
      /* Aggiunta delle informazioni per i tab */
      // copia profonda
      es = {'objClass':{'events': form.objClass.events.slice() }};
      if( form.npages > 1){
        for(var i=0;i<form.npages;i++){
          es.objClass.events.push (["EnablePage("+(i+1)+"), return boolean true if validate, false otherwise","EnablePage"+(i+1)+"()"])
        }
        for(var i=0;i<form.npages;i++){
          es.objClass.events.push (["ValidatePageChange("+(i+1)+"), return boolean true if validate, false otherwise","ValidatePageChange"+(i+1)+"(pageTo)"])
        }
      }
    }
    if(found){
      var _objC = es.objClass;
      es=es.objClass.events;
      if(es){
        var descr,value,long_descr;
        for(var i=0;i<es.length;i++){
          if( _objC.generateSignatureObject ) {
            var robj = _objC.generateSignatureObject(es[i], 'event');
            descr = robj.name;
            value = robj.signature;
            long_descr = robj.tooltip;
          }
          else {
            if(IsA(es[i],'C')) value=descr=es[i]
            else if (Array.isArray(es[i])){
              descr=es[i][0];
              value=es[i][1];
              if(!Empty(es[i][2])) long_descr=es[i][2];
            }
            else { //object
              descr = es[i].name;
              value = es[i].signature ? es[i].signature : es[i].name;
              long_descr = es[i].tooltip;
            }
          }
          str+=option(value,descr,long_descr);
        }
      }
      if(obj!=null && obj.type=='Portlet' && src){
        var folder_path='';
        if(src.indexOf('/')>-1){
          folder_path='/'+name.substring(0,src.lastIndexOf('/'));
          src=Strtran(src,src.substring(0,src.lastIndexOf('/')+1),'');
        }
        //legge gli eventi nei portlet
        var url = new JSURL("../servlet/JSPReader?name="+src+"&folder_path="+folder_path+"&type=events",true);
        var eventsList=url.Response().split(';');
        for(var i=0;i<eventsList.length;i++){
          if(Trim(eventsList[i])!='')
            str+=option(eventsList[i]);
        }
      }
    }
    str+='</select>';
    Ctrl("selectevent").innerHTML=str;
    document.getElementById('event_item').addEventListener('change',function(){
      writeCode(name,this);
    });
  }

  function selectFunction(name,src){
    var str='<select id="function_item" tabindex="4" accesskey="f"><option>-</option>'
    var fs;
    var found=false;
    if(!name)name='-';
    if(name!='this' && name!='-'){
      for(var i=0,obj;i<itemsHTML.length;i++){
        obj=itemsHTML[i];
        src=obj.src;
        if(obj.name==name || src==name){
          found=true;
          fs=obj;
          break;
        }
      }
    }else if(name=='this'){
      found=true;
      fs=form;
    }
    if(found){
      var _objC = fs.objClass;
      if (!Empty(fs.objClass.functions)) {
        fs=fs.objClass.functions.sort(function (a, b) {
          if (Array.isArray(a) && a.length > 0) a = a[0];
          else if ( !(typeof a === 'string' ) ) { // object
            a = a.name;
          }
          if (Array.isArray(b) && b.length > 0) b = b[0];
           else if ( !(typeof b === 'string' ) ) { // object
            b = b.name;
          }
          return a.toLowerCase().localeCompare(b.toLowerCase());
        });
      }
      if(fs){
        var descr,value,long_descr;
        for(var i=0;i<fs.length;i++){
          if( _objC.generateSignatureObject ) {
            var robj = _objC.generateSignatureObject(fs[i], 'function');
            descr = robj.name;
            value = robj.signature;
            long_descr = robj.tooltip;
          } else {
            if(IsA(fs[i],'C')) value=descr=fs[i]
            else if (Array.isArray(fs[i])){
              descr=fs[i][0];
              value=fs[i][1];
              if(!Empty(fs[i][2])) long_descr=fs[i][2];
            }
            else { //object
              descr = fs[i].name;
              value = fs[i].signature ? fs[i].signature : fs[i].name;
              long_descr = fs[i].tooltip;
            }
          }
          str+=option(value,descr,long_descr);
        }
      }
      if(obj!=null && obj.type=='Portlet' && src){
      //legge le functions dei portlet inclusi
        var folder_path='';
        if(src.indexOf('/')>-1){
          folder_path='/'+name.substring(0,src.lastIndexOf('/'));
          src=Strtran(src,src.substring(0,src.lastIndexOf('/')+1),'');
        }
        //legge gli eventi nei portlet
        var url = new JSURL("../servlet/JSPReader?name="+src+"&folder_path="+folder_path+"&type=functions",true);
        var eventsList=url.Response().split(';');
        for(var i=0;i<eventsList.length;i++)
          if(Trim(eventsList[i])!='')
            str+=option(eventsList[i]);
      }
    }else if(name=='-'){
      str+=option('Trim(#str#)');
      str+=option('Strtran(#src#,#find#,#repl#)');
      str+=option('Substr(#str#,#pos#,#cnt#)');
      str+=option('Left(#str#,#len#)');
      str+=option('Right(#str#,#len#)');
      str+=option('Str(#p_n#,#len#,#dec#)');
      str+=option('Val(#str#)');
      str+=option('Upper(#str#)');
      str+=option('Lower(#str#)');
      str+=option('At(#p_cStrFind#,#p_cStr#,#cnt#)');
      str+=option('Len(#obj#)');
      str+=option('DateToChar(#obj#)');
      str+=option('CharToDate(#obj#)');
      str+=option('Day(#obj#)');
      str+=option('Month(#obj#)');
      str+=option('Year(#obj#)');
      str+=option('Hour(#obj#)');
      str+=option('Minute(#obj#)');
      str+=option('FormatMsg(#msg#)');
    }
    else if (name=='title portlet'){
      str+=option('SetTitle(#title#,#forceChange#)');
      str+=option('SetSubTitle(#title#,#forceChange#)');
      str+=option('SetImage(#src#,#action#,#forceChange#)');
      str+=option('AppendButton({\n   id:#id#,\n   title:#title#,\n   tooltip:#tooltip#,\n   image:{fontFamily:#font#, value:#char#, '+
                              'size:#size#,color:#color#},\n   action:#action#\n},#idx#)',
                              'AppendButton(#item#,#idx#) -> Append button to the toolbar');
      str+=option('RemoveButtons()','RemoveButtons() -> Empty toolbar content');
      str+=option('RemoveButton(#id#)','RemoveButton(#id#) -> Remove the button from the toolbar');
      str+=option('UpdateButton(#id#,{\n   title:#title#,\n   tooltip:#tooltip#,\n   image:{fontFamily:#font#, value:#char#, size:#size#, '+
                              'color:#color#},\n   action:#action#\n})','UpdateButton(#id#,#item#) -> Update the toolbar button');
      str+=option('AppendHamburgerItem({\n   id:#id#,\n   title:#title#,\n   tooltip:#tooltip#,\n   image:{fontFamily:#font#, value:#char#, size:#size#, color:#color#},\n   action:#action#\n},#parentId#,#idx#)',
                  'AppendHamburgerItem(#item#,#parentId#,#idx#) -> Append item to the hamburger menu' );
    str+=option('UpdateHamburgerItem(#id#,{\n   title:#title#,\n   tooltip:#tooltip#,\n   image:{fontFamily:#font#, value:#char#, size:#size#, color:#color#},\n   action:#action#\n})',
                  'UpdateHamburgerItem(#id#,#item#) -> Update the menu item' );
      str+=option('CloseMenu()', 'CloseMenu() -> Close the hamburger menu');
      str+=option('CleanMenu()', 'CleanMenu() -> Empty the hamburger menu' );
    } else if( name == "portlet base" ){
      if( parent.currentname ){
        //legge gli eventi nei portlet base
        var url = new JSURL("../servlet/JSPReader?name="+parent.currentname+"&folder_path="+parent.folder_path+"&type=functions",true);
        var eventsList=url.Response().split(';');
        for(var i=0;i<eventsList.length;i++){
          if(Trim(eventsList[i])!=''){
            str+=option(eventsList[i]);
          }
        }
      }
    }
    str+='</select>';
    Ctrl("selectfunction").innerHTML=str;
    document.getElementById('function_item').addEventListener('change',function(){
      writeFunction(name,this);
    });
  }

  function writeFunction(name,obj){
    var str, firstParam
      , func=Ctrl("function_item").value
      , cursorPos = codeEditor.getCursor( true )
      ;
    if(func=='-') return;
    if(name=='-')
      str=func+'\n'
    else if(name=='this')
      str='this.'+func;
    else if(name=='title portlet')
      str='this.getTitlePortlet().'+func;
    else if(  name == "portlet base" ){
      var a = codeEditor.getSearchCursor("function "+func);
      if(a.find()){
        codeEditor.setSelection(a.from(),a.to());
        codeEditor.setCursor({ line : a.to().line + 1, ch : 2 });
        obj.blur();
        codeEditor.focus();
        return;
      } else {
        str = "function "+func+"{\n}";
      }
    }
    else
      str='this.'+name+'.'+func;
    firstParam = /[a-zA-Z0-9#]+(?!\()(?=[,)])/.exec( str )
    codeEditor.replaceRange(str, cursorPos, codeEditor.getCursor(false));
    if ( firstParam ) {
      codeEditor.setSelection( { line: cursorPos.line, ch : cursorPos.ch + firstParam.index }
                             , { line: cursorPos.line, ch : cursorPos.ch + firstParam.index + firstParam[0].length }
                             );
    }
    obj.blur();
    codeEditor.focus();
  }
})()
</script>
